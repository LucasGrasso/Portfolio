/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 ./public/ethereum/scene.gltf --keepnames --keepgroups --types
Author: Akimovcg (https://sketchfab.com/akimovcg)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/ethereum-3d-logo-de0c154b6f1c46639864a01360dd6aa0
Title: Ethereum 3D logo
*/

import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import React, { useRef } from 'react'
import * as THREE from 'three'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
	nodes: {
		Object_2: THREE.Mesh
	}
	materials: {
		['default']: THREE.MeshStandardMaterial
	}
}

export default function Ethereum(props: JSX.IntrinsicElements['group']) {
	const ref: React.RefObject<any> = useRef()
	const { nodes, materials } = useGLTF('ethereum/scene.gltf') as GLTFResult

	useFrame((_, delta) => {
		if (ref.current) {
			ref.current.rotation.y = ref.current.rotation.y += delta / 2;
		}
	});

	return (
		<group {...props} dispose={null} scale={[0.0075, 0.0075, 0.0075]} ref={ref}>
			<group name="Sketchfab_Scene">
				<group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
					<group name="Ethereumobjcleanermaterialmergergles">
						<mesh name="Object_2" geometry={nodes.Object_2.geometry} material={materials['default']} />
					</group>
				</group>
			</group>
		</group>
	)
}

useGLTF.preload('ethereum/scene.gltf')
